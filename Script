var Logger =require('./logger');
const logger=new Logger();
logger.log('Perfect');
const path= require('path');
var pathobj=path.parse(__filename);
console.log(pathobj);
const os=require('os');
var total=os.totalmem();
var frm = os.freemem();
console.log(total);
console.log(frm);
console.log(`Total memory : ${total}`);
const fs=require('fs');
const files=fs.readdirSync('./');
console.log(files);
 fs.readdir('./',function(err,files)
{
    if(err)console.log('Error',err);
    else console.log('Result',files);

});

//arg is a variable
const EventEmitter=require('events');
const emitter=new EventEmitter();
logger.on('messageLogged',function(arg){
    console.log('Listener called',arg);
});
emitter.emit('messageLogged',{id:1,url:'http://'});
logger.log('Node application');


//Raising a event logging(data:message)  &&  Need a class to emit a functon to other module when a emit a event need a class name object created with on emit

const http=require('http');
//const server=http.createServer();
// server.on('connection',(socket)=>
// {
//     console.log('New Connection');
// });
const server=http.createServer((req,res)=>{
    if(req.url==='/')
    {
        res.write('Hello World');
        res.end();
    }
    if(req.url==='/info')
    {
        res.write(JSON.stringify([1,2,3]));
        res.end();
    }
});
server.listen(3000);
console.log('Listening on port 3000');



const EventEmitter=require('events');

console.log(__filename);
console.log(__dirname);
var url='http://mylogger.io/log';
class Logger extends EventEmitter {
     log(message)
{
    //send an http req
    console.log(message);
    this.emit('messageLogged',{id:1,url:'http://'});
}
}

module.exports=Logger;
       
//module.exports.endpoint=url;   When we declare a function inside a class we dont need a function keyword
//dont need m.exp.log --> 'log' is not required instead m.exp=log that is function name






const express=require('express');
const app=express();
const Joi=require('joi');
app.use(express.json());
const  courses=[
    {id:1,name:'course1'},
    {id:2,name:'course2'},
    {id:3,name:'course3'}

];
// app.get()
// app.post()
// app.put()
// app.delete()
app.get('/',(req,res)=>
{
    res.send('hello world!!');
});
app.get('/info',(req,res)=>
{
    res.send(courses);

});
app.post('/info',(req,res)=>
{
    const schema=
    {
        name:Joi.string().min(3).required()
    };
   const result= Joi.validate(req.body,schema);
   console.log(result);

    if(result.error)
    {
       return res.status(400).send(result.error.details[0].message);
        
    }
    const course = {
        id:courses.length+1,
        name:req.body.name
    };
    courses.push(course);
    res.send(course);
});
app.put('/info/:id',(req,res)=>
{
    //look up the course , if not exists return 404 
    //validate if invalid return 404 bad request
    //update and return the course
    course=courses.find(c=>c.id=== parseInt(req.params.id));
    if(!course)  //404
    {
        return res.status(404).send('course for the given id is not found');

    }
    const schema=
    {
        name:Joi.string().min(3).required()
    };
    const result= validateCourse(req.body); 
    const {error}= validateCourse(req.body);
    if(error)
    {
        return res.status(400).send(result.error.details[0].message);
        
    }
    course.name=req.body.name;
    res.send(course);

});
app.delete('/info/:id',(req,res)=>{
    //look up the course , not existing return 404
    //delete , return the same
    course=courses.find(c=>c.id=== parseInt(req.params.id));
    if(!course)  //404
    {
       return res.status(404).send('course for the given id is not found');

    }
    const index=courses.indexOf(course);
    courses.splice(index,1);
    res.send(course);

})

function validateCourse(course)
{
    const schema=
    {
        name:Joi.string().min(3).required()
    };
    return Joi.validate(course,schema);
}

//port
// app.get('/info/:id',(req,res)=>{
//     res.send(req.params.id);
// });                         // to display the current port id 
// app.get('/info/posts/:year/:month',(req,res)=>{
//     res.send(req.params);
// });  
// /info/posts/:year/:month - In this running server there are 2 properties such as 
// year and month ---- by using res.send to write and get parameter values using req.params --> request.parameters to extract the values 
// can use /info/posts/:year/:month---- req.params.month to extract only month and /info/posts/:year/:month --> req.params.date to extract date value 

app.get('/info/:id',(req,res)=>{
    course=courses.find(c=>c.id=== parseInt(req.params.id));
    if(!course)  //404
    {
        return res.status(404).send('course for the given id is not found');

    }
    res.send(course);
});  
const port=process.env.PORT || 3000;
console.log(port);
app.listen(port,()=>console.log(`Listening on port ${port}`));
